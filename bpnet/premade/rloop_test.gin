# ==================================================================
# model.gin
# --------------------------------------------
# model
import bpnet
import bpnet.models
import bpnet.heads
import bpnet.layers
import bpnet.seqmodel
import bpnet.trainers
import bpnet.losses
import bpnet.datasets
import bpnet.metrics
import bpnet.configurables

# SeqModel
train.model = @SeqModel()
SeqModel.seqlen = %seq_width
SeqModel.tasks = %tasks
SeqModel.optimizer = @keras.optimizers.Adam()
SeqModel.heads = [@ProfileHead(), @ScalarHead()]  # Heads
SeqModel.body = @DilatedConv1DBatchNormInput()
SeqModel.input_shape = (%seq_width, %num_channels)
keras.optimizers.Adam.lr = %lr
keras.optimizers.Adam.decay = %decay

# Helper function that determines the number of channels based on parameters below
num_channels = @determine_num_channels() 
determine_num_channels.exclude_dna = %exclude_dna
determine_num_channels.channels_to_remove = %added_tracks_to_exclude
determine_num_channels.num_added_tracks_in_dataspec = %num_added_tracks_in_dataspec

# - Body
DilatedConv1DBatchNormInput.filters = %filters
DilatedConv1DBatchNormInput.conv1_kernel_size = %first_conv_kernel_size
DilatedConv1DBatchNormInput.n_dil_layers = %n_dil_layers
DilatedConv1DBatchNormInput.padding = 'same'
DilatedConv1DBatchNormInput.batchnorm = %batchnorm
DilatedConv1DBatchNormInput.skip_type = 'residual'
DilatedConv1DBatchNormInput.no_dna = %exclude_dna

# DataLoader
StrandedProfile.exclude_dna = %exclude_dna
StrandedProfile.added_tracks_to_exclude = %added_tracks_to_exclude

# - Heads
#   - Profile prediction
ProfileHead.target_name = '{task}/profile'
ProfileHead.net = @DeConv1D()

DeConv1D.n_tasks = %tracks_per_task
DeConv1D.filters = %filters
DeConv1D.tconv_kernel_size = %tconv_kernel_size
DeConv1D.padding = 'same'
DeConv1D.n_hidden = 0
DeConv1D.batchnorm = %batchnorm

ProfileHead.loss = @multinomial_nll
ProfileHead.loss_weight = 1
ProfileHead.postproc_fn = @softmax
ProfileHead.use_bias = %use_bias
ProfileHead.bias_input = 'bias/{task}/profile'
ProfileHead.bias_shape = (None, %n_bias_tracks)
ProfileHead.bias_net = @MovingAverages()
MovingAverages.window_sizes = [1, 50]

#      - evaluate
ProfileHead.metric = @PeakPredictionProfileMetric()
PeakPredictionProfileMetric.pos_min_threshold = 0.015
PeakPredictionProfileMetric.neg_max_threshold = 0.005
PeakPredictionProfileMetric.required_min_pos_counts = 2.5
PeakPredictionProfileMetric.binsizes = [1, 10]
# ---------------------
#   - Total count prediction
ScalarHead.target_name = '{task}/counts'
ScalarHead.net = @GlobalAvgPoolFCN()
GlobalAvgPoolFCN.n_tasks = %tracks_per_task
GlobalAvgPoolFCN.n_splines = 0
GlobalAvgPoolFCN.batchnorm = %batchnorm
ScalarHead.loss = 'mse'
ScalarHead.loss_weight = %lambda
ScalarHead.bias_input = 'bias/{task}/counts'
ScalarHead.use_bias = %use_bias
ScalarHead.bias_shape = (%n_bias_tracks, )
ScalarHead.metric = @RegressionMetrics()

# --------------------------------------------
# training
train.num_workers = 6

# --------------------------------------------
# data
# seq_width  -> specified from gin-bindings
train.data = @bpnet_data()
bpnet_data.peak_width = %seq_width
bpnet_data.valid_chr = %valid_chr
bpnet_data.test_chr = %test_chr
bpnet_data.include_metadata = False
bpnet_data.tasks = %tasks
bpnet_data.exclude_chr = %exclude_chr
bpnet_data.augment_interval = %augment_interval
bpnet_data.interval_augmentation_shift = %augmentation_shift
bpnet_data.intervals_format = 'bed'

# specified from the CLI
bpnet_data.dataspec = %dataspec
bpnet_data.seq_width = %seq_width
train.train_epoch_frac = 1.0
train.valid_epoch_frac = 1.0

# train.eval_report = @report_template()
# report_template.name = 'evaluate.ipynb'

# ==================Macros======================

# Basic Training Setup
train.seed = 1
train.epochs = 50
train.batch_size = 16
lr = 0.00001
lambda = 1 # count loss weight
train.early_stop_patience = 50
decay = 0

# Architecture Changes
n_dil_layers = 11
first_conv_kernel_size = 100
filters = 64
tconv_kernel_size = 25
seq_width = 10000

# To augment the input sequence left and right 
augment_interval = True
augmentation_shift = 200
batchnorm = False

# Chromosomes
exclude_chr = []
test_chr = []
# Following needs to be set in config/override
# valid_chr = ["chr1"]

# Control model input channels
exclude_dna = False
added_tracks_to_exclude = []

#===== Misc=====
# specifies path to jupyter notebook that can be executed
train.eval_report = None 
# change if you want tensorboard output
train.tensorboard = False

# ============================================
# These parameters will be specified from the command line
# (i.e. in `bpnet.cli.train.bpnet_train` function)
# tracks_per_task = 2
# dataspec = 'ChIP-nexus.dataspec.yml'
# tasks = ['Oct4', 'Sox2', 'Nanog', 'Klf4']
# use_bias = True/False - determined from dataspec file
# num_added_tracks_in_dataspec - determined from dataspec file
